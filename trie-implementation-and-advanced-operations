https://takeuforward.org/plus/dsa/problems/trie-implementation-and-advanced-operations


class Trie {
    private class TrieNode{
        private int endWordCount;
        private int repeatCount;
        private TrieNode[] children;
        public TrieNode() {
            this.children = new TrieNode[26];
            this.endWordCount = 0;
            this.repeatCount = 0;
        }
    }
    
    private final TrieNode root;
    public Trie() {
        this.root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode curr = root;
        for(char c: word.toCharArray()){
            int pos = c - 'a';
            if(curr.children[pos] == null){
                curr.children[pos] = new TrieNode();
            }
            curr = curr.children[pos];
            curr.repeatCount++;
        }
        curr.endWordCount++;
    }

    public int countWordsEqualTo(String word) {
        TrieNode curr = root;
        for(char c: word.toCharArray()){
            int pos = c - 'a';
            if(curr.children[pos] == null){
                return 0;
            }
            curr = curr.children[pos];
        }
        return curr.endWordCount;
    }

    public int countWordsStartingWith(String prefix) {
        TrieNode curr = root;
        for(char c: prefix.toCharArray()){
            int pos = c - 'a';
            if(curr.children[pos] == null){
                return 0;
            }
            curr = curr.children[pos];
        }
        return curr.repeatCount;
    }

    public void erase(String word) {
        int numberOfWords = countWordsEqualTo(word);
        if(numberOfWords >= 1){
            TrieNode curr = root;
            for(char c: word.toCharArray()){
                int pos = c - 'a';
                TrieNode next = curr.children[pos];
                next.repeatCount--;
                if (next.repeatCount == 0) {
                    curr.children[pos] = null;
                    return;
                }
                curr = next;
            }
            curr.endWordCount--;
        }
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * int param_2 = obj.countWordsEqualTo(word);
 * int param_3 = obj.countWordsStartingWith(prefix);
 * obj.erase(word);
 */

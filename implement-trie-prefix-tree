https://leetcode.com/problems/implement-trie-prefix-tree/

class Trie {
    private boolean isEnd;
    private Trie[] children;
    public Trie() {
        this.children = new Trie[26];
    }
    
    public void insert(String word) {
        Trie curr = this;
        for(char c: word.toCharArray()){
            int pos = c - 'a';
            if(curr.children[pos] == null){
                curr.children[pos] = new Trie();
            }
            curr = curr.children[pos];
        }
        curr.isEnd = true;
    }
    
    public boolean search(String word) {
        Trie curr = this;
        for(char c: word.toCharArray()){
            int pos = c - 'a';
            if(curr.children[pos] == null){
                return false;
            }
            curr = curr.children[pos];
        }
        return curr.isEnd;
    }
    
    public boolean startsWith(String prefix) {
        Trie curr = this;
        for(char c: prefix.toCharArray()){
            int pos = c - 'a';
            if(curr.children[pos] == null){
                return false;
            }
            curr = curr.children[pos];
        }
        return true;
    }
}




/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */











//  // TrieNode class that represents each node in the Trie
// class TrieNode {
//     TrieNode[] children = new TrieNode[26]; // for 'a' to 'z'
//     boolean isEndOfWord = false;            // marks the end of a valid word
// }

// // Trie class that contains the root and core methods
// public class Trie {
//     private final TrieNode root;

//     public Trie() {
//         root = new TrieNode(); // root doesn't hold any character
//     }

//     // Inserts a word into the trie
//     public void insert(String word) {
//         TrieNode node = root;
//         for (char c : word.toCharArray()) {
//             int idx = c - 'a';
//             if (node.children[idx] == null) {
//                 node.children[idx] = new TrieNode();
//             }
//             node = node.children[idx];
//         }
//         node.isEndOfWord = true;
//     }

//     // Returns true if the word is in the trie
//     public boolean search(String word) {
//         TrieNode node = root;
//         for (char c : word.toCharArray()) {
//             int idx = c - 'a';
//             if (node.children[idx] == null) return false;
//             node = node.children[idx];
//         }
//         return node.isEndOfWord;
//     }

//     // Returns true if there is any word in the trie that starts with the given prefix
//     public boolean startsWith(String prefix) {
//         TrieNode node = root;
//         for (char c : prefix.toCharArray()) {
//             int idx = c - 'a';
//             if (node.children[idx] == null) return false;
//             node = node.children[idx];
//         }
//         return true;
//     }
// }

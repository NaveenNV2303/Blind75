https://leetcode.com/problems/climbing-stairs/

class Solution {
    public int climbStairs(int n) {
        if (n <= 2) return n;

        int first = 1, second = 2;
        for (int i = 3; i <= n; i++) {
            int third = first + second;
            first = second;
            second = third;
        }
        return second;
    }
}

// class Solution {
//     public int climbStairs(int n) {
//         if(n <= 3) return n;
//         int[] dp = new int[n+1];
//         dp[0] = 0;
//         dp[1] = 1;
//         dp[2] = 2;
        
//         return findSteps(n, dp);
        
//     }

//     private int findSteps(int n, int[] dp){
//         if(n <= 2){
//             return dp[n];
//         }
//         if(dp[n] != 0){
//             return dp[n];
//         }else{
//             int stepCount = findSteps(n-1, dp) + findSteps(n-2,dp);
//             dp[n] = stepCount;
//             return stepCount;
//         }
//     }
// }

https://leetcode.com/problems/maximum-depth-of-binary-tree/

Both DFS and BFS approach has mentioned below

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {

        if(root == null) return 0;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));

        // int result = 0;
        // if(root == null) return result;

        // Queue<TreeNode> queue = new LinkedList<>();
        // queue.add(root);
        
        // while(!queue.isEmpty()){
        //     result++;
        //     int size = queue.size();
        //     for(int i=0; i<size; i++){
        //         TreeNode currentNode = queue.poll();
        //         if(currentNode.left != null){
        //             queue.add(currentNode.left);
        //         }
        //         if(currentNode.right != null){
        //             queue.add(currentNode.right);
        //         }
        //     }
        // }

        // return result;
    }
}

https://leetcode.com/problems/meeting-rooms-ii

import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

class MinimumRoom {
    public int findMinimumRoomsRequired(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return 0;
        }

        // Sort intervals by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        // Min-heap to track the earliest ending meeting room
        Queue<Integer> queue = new PriorityQueue<>();
        queue.add(intervals[0][1]);

        for (int i = 1; i < intervals.length; i++) {
            // If the earliest ending meeting ends before current meeting starts, reuse room
            if (queue.peek() <= intervals[i][0]) {
                queue.poll();  // corrected from pop() to poll()
            }
            queue.add(intervals[i][1]);
        }

        // Size of the queue is the number of rooms needed
        return queue.size();
    }
}


Question
253. Meeting Rooms II
Category: Medium
Topic: Intervals, Sorting, Heap
Companies: Amazon, Google, Facebook, etc.

ðŸ”¹ Problem Statement:
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], find the minimum number of conference rooms required to hold all the meetings.

ðŸ”¹ Example 1:
Input:
intervals = [[0,30],[5,10],[15,20]]
Output:
2
Explanation:
At time 0, meeting 1 starts â†’ room 1 used.
At time 5, meeting 2 starts â†’ room 2 used since meeting 1 is ongoing.
Meeting 2 ends at 10, meeting 3 starts at 15 â†’ room 1 or 2 reused.
So minimum rooms needed = 2.

ðŸ”¹ Example 2:
Input:
intervals = [[7,10],[2,4]]
Output:
1
Explanation:
Meetings donâ€™t overlap, so one room is enough.


ðŸ”¹ Constraints:
1 <= intervals.length <= 10^4
intervals[i].length == 2
0 <= starti < endi <= 10^6

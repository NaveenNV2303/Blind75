https://leetcode.com/problems/group-anagrams/

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();

        for (String str : strs) {
            int[] count = new int[26];
            for (char c : str.toCharArray()) {
                count[c - 'a']++;
            }

            // Convert count array to a unique key
            StringBuilder sb = new StringBuilder();
            for (int i : count) {
                sb.append(i).append('#'); // delimiter to separate counts
            }
            String key = sb.toString();

            map.computeIfAbsent(key, k -> new ArrayList<>()).add(str);
        }

        return new ArrayList<>(map.values());
    }
}




// class Solution {
//     public List<List<String>> groupAnagrams(String[] strs) {
//         List<List<String>> result = new ArrayList<>();

//         int count = 0;
//         Map<Map<Character, Integer>, Integer> mapPointer = new HashMap<>();
//         for(String str: strs){
//             Map<Character, Integer> currentMap = getMap(str);
            
//             if(mapPointer.containsKey(currentMap)){
//                 int resultPointer = mapPointer.get(currentMap);
//                 result.get(resultPointer).add(str);
//             }else{
//                 mapPointer.put(currentMap, count);

//                 List<String> subResult = new ArrayList<>();
//                 subResult.add(str);
//                 result.add(subResult);

//                 count++;
//             }
//         }

//         return result;
//     }

//     public Map<Character, Integer> getMap(String str){
//         Map<Character, Integer> keyOfMap = new HashMap<>();
//         for(char c: str.toCharArray()){
//             keyOfMap.put(c, keyOfMap.getOrDefault(c,0)+1); 
//         }
//         return keyOfMap;
//     }
// }

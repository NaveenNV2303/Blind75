https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(p.val > q.val){
            TreeNode temp = p;
            p = q;
            q = temp;
        }

        return lca(root, p, q);
    }

    public TreeNode lca(TreeNode root, TreeNode p, TreeNode q){
        if(root == null) return null;
        
        if(p.val <= root.val && root.val <= q.val){
            return root;
        }else if(p.val > root.val){
            return lca(root.right, p, q);
        }else{
            return lca(root.left, p, q);
        }

    }
}


// public class Solution {
//     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
//         // Ensure p.val <= q.val
//         if (p.val > q.val) {
//             TreeNode temp = p;
//             p = q;
//             q = temp;
//         }

//         while (root != null) {
//             if (p.val <= root.val && root.val <= q.val) {
//                 // root is between p and q, so this is the LCA
//                 return root;
//             } else if (root.val < p.val) {
//                 // Both p and q are in the right subtree
//                 root = root.right;
//             } else {
//                 // Both p and q are in the left subtree
//                 root = root.left;
//             }
//         }
//         return null;  // Not found (shouldn't happen if p and q are in the tree)
//     }
// }

https://leetcode.com/problems/top-k-frequent-elements/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(Map.Entry.comparingByValue());
        Map<Integer, Integer> hm = new HashMap<>();
        for(int num: nums){
            hm.put(num, hm.getOrDefault(num, 0)+1);
        }

        for(Map.Entry<Integer, Integer> entry: hm.entrySet()){
            pq.add(entry);
            if(pq.size() > k){
                pq.poll();
            }
        }

        int[] result = new int[k];
        int pos = 0;
        while(!pq.isEmpty()){
            result[pos] = pq.poll().getKey();
            pos++;
        }

        return result;
    }
}

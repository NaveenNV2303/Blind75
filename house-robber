https://leetcode.com/problems/house-robber/

class Solution {
    public int rob(int[] nums) {

        int n = nums.length;
        if(n==1) return nums[0];
        if(n==2) return Math.max(nums[0],nums[1]);

        int prev2 = nums[0];
        int prev1 = Math.max(nums[0], nums[1]);

        for(int i=2; i<nums.length; i++){
            int temp = Math.max(prev1, nums[i]+prev2);
            prev2 = prev1;
            prev1 = temp;
        }

        return prev1;
    }
}












// class Solution {
//     public int rob(int[] nums) {

//         int lengthOfNums = nums.length;
//         if(lengthOfNums == 1){
//             return nums[0];
//         }else if(lengthOfNums == 2){
//             return Math.max(nums[0], nums[1]);
//         }else if(lengthOfNums == 3){
//             return Math.max(nums[0] + nums[2], nums[1]);
//         }

//         int first = nums[0];
//         int second = nums[1];
//         int third = nums[2] + first;


//         for(int i=3; i<lengthOfNums; i++){
//             int temp = Math.max(nums[i]+second, nums[i]+first);
//             first = second;
//             second = third;
//             third = temp;
//         }

//         return Math.max(second, third);
//     }
// }










// class Solution {
//     public int rob(int[] nums) {

//         int lengthOfNums = nums.length;
//         if(lengthOfNums == 1){
//             return nums[0];
//         }else if(lengthOfNums == 2){
//             return Math.max(nums[0], nums[1]);
//         }else if(lengthOfNums == 3){
//             return Math.max(nums[0] + nums[2], nums[1]);
//         }

//         int[] dp = new int[lengthOfNums];
//         dp[0] = nums[0];
//         dp[1] = nums[1];
//         dp[2] = nums[2] + dp[0];


//         for(int i=3; i<lengthOfNums; i++){
//             dp[i] = Math.max(nums[i]+dp[i-2], nums[i]+dp[i-3]);
//         }

//         return Math.max(dp[lengthOfNums - 1], dp[lengthOfNums - 2]);
//     }
// }
